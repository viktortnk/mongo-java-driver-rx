<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-Starteds on MongoDB RxJava Driver</title>
    <link>/mongo-java-driver-rx/1.0/getting-started/</link>
    <description>Recent content in Getting-Starteds on MongoDB RxJava Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-java-driver-rx/1.0/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Admin Quick Tour</title>
      <link>/mongo-java-driver-rx/1.0/getting-started/quick-tour-admin/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-rx/1.0/getting-started/quick-tour-admin/</guid>
      <description>

&lt;h1 id=&#34;admin-quick-tour&#34;&gt;Admin Quick Tour&lt;/h1&gt;

&lt;p&gt;This is the second part of the MongoDB driver quick tour. In the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/quick-tour/&#34;&gt;quick tour&lt;/a&gt; we looked at how to
use the Reactive Streams Java driver to execute basic CRUD operations.  In this section we&amp;rsquo;ll look at some of the
administrative features available in the driver.&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTourAdmin.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-rx/blob/1.0.x/examples/tour/src/main/tour/QuickTourAdmin.java
&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To get started we&amp;rsquo;ll quickly connect and create a &lt;code&gt;mongoClient&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt;
variable for use in the examples below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));
MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Calling the &lt;code&gt;getDatabase()&lt;/code&gt; on &lt;code&gt;MongoClient&lt;/code&gt; does not create a database.
Only when a database is written to will a database be created.  Examples include the creation of an index or the insertion of a document
into a previously non-existent collection.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-list-of-databases&#34;&gt;Get A List of Databases&lt;/h2&gt;

&lt;p&gt;You can get a list of the available databases by calling the &lt;code&gt;listDatabaseNames&lt;/code&gt; method.  Here we use the static &lt;code&gt;printSubscriber&lt;/code&gt; helper
so that we can print the list of database names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.listDatabaseNames().subscribe(printSubscriber(&amp;quot;Database Names: &amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-database&#34;&gt;Drop A Database&lt;/h2&gt;

&lt;p&gt;You can drop a database by name using a &lt;code&gt;MongoClient&lt;/code&gt; instance. Here we block for the &lt;code&gt;Observable&lt;/code&gt; to complete before continuing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.getDatabase(&amp;quot;databaseToBeDropped&amp;quot;).drop().toBlocking().single();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-collection&#34;&gt;Create A Collection&lt;/h2&gt;

&lt;p&gt;Collections in MongoDB are created automatically simply by inserted a document into it. Using the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/mongoDatabase.html#createCollection-java.lang.String-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;createCollection&lt;/code&gt;&lt;/a&gt; method,
you can also create a collection explicitly in order to to customize its configuration. For example, to create a capped collection sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;, new CreateCollectionOptions().capped(true).sizeInBytes(0x100000))
    .subscribe(printSubscriber(&amp;quot;Creation Created!&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-collections&#34;&gt;Get A List of Collections&lt;/h2&gt;

&lt;p&gt;You can get a list of the available collections in a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.listCollectionNames().subscribe(printSubscriber(&amp;quot;Collection Names: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-collection&#34;&gt;Drop A Collection&lt;/h2&gt;

&lt;p&gt;You can drop a collection by using the drop() method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.drop().toBlocking().single();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-an-index&#34;&gt;Create An Index&lt;/h2&gt;

&lt;p&gt;MongoDB supports secondary indexes. To create an index, you just
specify the field or combination of fields, and for each field specify the direction of the index for that field.
For &lt;code&gt;1&lt;/code&gt; ascending  or &lt;code&gt;-1&lt;/code&gt; for descending. The following creates an ascending index on the &lt;code&gt;i&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create an ascending index on the &amp;quot;i&amp;quot; field
collection.createIndex(new Document(&amp;quot;i&amp;quot;, 1)).subscribe(printSubscriber(&amp;quot;Created an index named: &amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-indexes-on-a-collection&#34;&gt;Get a List of Indexes on a Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;listIndexes()&lt;/code&gt; method to get a list of indexes. The following uses the
&lt;code&gt;PrintDocumentSubscriber&lt;/code&gt; to print the json version of each index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.listIndexes().subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following indexes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;_id&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;_id_&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;i&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;i_1&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-indexes&#34;&gt;Text indexes&lt;/h2&gt;

&lt;p&gt;MongoDB also provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a text index specify the string
literal &amp;ldquo;text&amp;rdquo; in the index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create a text index on the &amp;quot;content&amp;quot; field
subscriber = printSubscriber(&amp;quot;Created an index named: &amp;quot;);
collection.createIndex(new Document(&amp;quot;content&amp;quot;, &amp;quot;text&amp;quot;)).subscribe(subscriber);
subscriber.awaitTerminalEvent();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of MongoDB 2.6, text indexes are now integrated into the main query
language and enabled by default (here we use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Filters.html#text-java.lang.String-
&#34;&gt;&lt;code&gt;Filters.text&lt;/code&gt;&lt;/a&gt; helper):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Insert some documents
subscriber = new TestSubscriber();
collection.insertMany(asList(new Document(&amp;quot;_id&amp;quot;, 0).append(&amp;quot;content&amp;quot;, &amp;quot;textual content&amp;quot;),
        new Document(&amp;quot;_id&amp;quot;, 1).append(&amp;quot;content&amp;quot;, &amp;quot;additional content&amp;quot;),
        new Document(&amp;quot;_id&amp;quot;, 2).append(&amp;quot;content&amp;quot;, &amp;quot;irrelevant content&amp;quot;))).subscribe(subscriber);
subscriber.awaitTerminalEvent();

// Find using the text index
subscriber = printSubscriber(&amp;quot;Text search matches: &amp;quot;);
collection.count(text(&amp;quot;textual content -irrelevant&amp;quot;)).subscribe(subscriber);
subscriber.awaitTerminalEvent();

// Find using the $language operator
subscriber = printSubscriber(&amp;quot;Text search matches (english): &amp;quot;);
Bson textSearch = text(&amp;quot;textual content -irrelevant&amp;quot;, &amp;quot;english&amp;quot;);
collection.count(textSearch).subscribe(subscriber);
subscriber.awaitTerminalEvent();

// Find the highest scoring match
System.out.print(&amp;quot;Highest scoring document: &amp;quot;);
Document projection = new Document(&amp;quot;score&amp;quot;, new Document(&amp;quot;$meta&amp;quot;, &amp;quot;textScore&amp;quot;));
collection.find(textSearch).projection(projection).first().subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: [2]
Text search matches (english): [2]
Highest scoring document: { &amp;quot;_id&amp;quot; : 1, &amp;quot;content&amp;quot; : &amp;quot;additional content&amp;quot;, &amp;quot;score&amp;quot; : 0.75 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the &lt;a href=&#34;http://docs.mongodb.org/manual//core/index-text
&#34;&gt;text index&lt;/a&gt; and
&lt;a href=&#34;http://docs.mongodb.org/manual//reference/operator/query/text
&#34;&gt;$text query operator&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;running-a-command&#34;&gt;Running a command&lt;/h2&gt;

&lt;p&gt;Not all commands have a specific helper, however you can run any &lt;a href=&#34;http://docs.mongodb.org/manual//reference/command
&#34;&gt;command&lt;/a&gt;
by using the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/mongoDatabase.html#runCommand-org.bson.conversions.Bson-com.mongodb.ReadPreference-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;runCommand()&lt;/code&gt;&lt;/a&gt;
method.  Here we call the &lt;a href=&#34;{{ docsref &amp;quot;reference/command/buildInfo&amp;quot; }}&#34;&gt;buildInfo&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.runCommand(new Document(&amp;quot;buildInfo&amp;quot;, 1)).subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-java-driver-rx/1.0/getting-started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-rx/1.0/getting-started/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver, follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/installation-guide/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/quick-tour-primer/&#34;&gt;Quick Tour Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/quick-tour/&#34;&gt;Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/quick-tour-admin/&#34;&gt;Admin Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/mongo-java-driver-rx/1.0/getting-started/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-rx/1.0/getting-started/installation-guide/</guid>
      <description>

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;The recommended way to get started using one of the drivers in your project is with a dependency management system.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;pull-right&#34;&gt;
  &lt;input type=&#34;checkbox&#34; checked=&#34;&#34; class=&#34;distroPicker&#34; data-toggle=&#34;toggle&#34; data-on=&#34;Maven&#34; data-off=&#34;Gradle&#34; data-offstyle=&#34;success&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;mongodb-rxjava-driver&#34;&gt;MongoDB RxJava Driver&lt;/h2&gt;

&lt;p&gt;An implementation of the MongoDB Driver providing support for &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX (Reactive Extensions)&lt;/a&gt;
 by using the &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;section class=&#34;maven&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;
&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mongodb-driver-rx&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;gradle hidden&#34;&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      compile &#39;org.mongodb:mongodb-driver-rx:1.0.0&#39;
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;downloadInfo&#34;&gt;
&lt;p class=&#34;small&#34;&gt;You can also download the jars
  &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-rx/1.0.0&#34; target=&#34;_blank&#34;&gt;directly&lt;/a&gt;
  from sonatype.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;mongodb-driver-rx&lt;/code&gt; requires the following dependencies:
    &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/io/reactivex/rxjava/1.0.10&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RxJava&lt;/code&gt;&lt;/a&gt;,
    &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/bson/3.0.1&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bson&lt;/code&gt;&lt;/a&gt;,
    &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-core/3.0.1&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mongodb-driver-core&lt;/code&gt;&lt;/a&gt;
    and
    &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-async/3.0.1&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mongodb-driver-async&lt;/code&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/section&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>/mongo-java-driver-rx/1.0/getting-started/quick-tour/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-rx/1.0/getting-started/quick-tour/</guid>
      <description>

&lt;h1 id=&#34;quick-tour&#34;&gt;Quick Tour&lt;/h1&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTour.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-rx/blob/1.0.x/examples/tour/src/main/tour/QuickTour.java
&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB RxJava Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;This guide uses the &lt;code&gt;Subscriber&lt;/code&gt; implementations as covered in the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/quick-tour-primer/&#34;&gt;Quick Tour Primer&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;make-a-connection&#34;&gt;Make a Connection&lt;/h2&gt;

&lt;p&gt;The following example shows multiple ways to connect to the database &lt;code&gt;mydb&lt;/code&gt; on the local machine, using the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// To directly connect to the default server localhost on port 27017
MongoClient mongoClient = MongoClients.create();

// Use a Connection String
MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;);

// or a Connection String
MongoClient mongoClient = MongoClients.create(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));

// or provide custom MongoClientSettings
ClusterSettings clusterSettings = ClusterSettings.builder().hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder().clusterSettings(clusterSettings).build();
MongoClient mongoClient = MongoClients.create(settings);

MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the &lt;code&gt;database&lt;/code&gt; object will be a connection to a MongoDB
server for the specified database.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The API only returns &lt;code&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;MongoObservable&amp;lt;T&amp;gt;&lt;/code&gt; when network IO required for the operation. For
&lt;code&gt;getDatabase(&amp;quot;mydb&amp;quot;)&lt;/code&gt; there is no network IO required.
A &lt;code&gt;MongoDatabase&lt;/code&gt; instance provides methods to interact with a database
but the database might not actually exist and will only be created on the
insertion of data via some means; e.g. the creation of a collection or the insertion of documents.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;mongoclient&#34;&gt;MongoClient&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; instance actually represents a pool of connections
for a given MongoDB server deployment; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple concurrently executing asynchronous operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Typically you only create one &lt;code&gt;MongoClient&lt;/code&gt; instance for a given database
cluster and use it across your application. When creating multiple instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All resource usage limits (max connections, etc) apply per
&lt;code&gt;MongoClient&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;To dispose of an instance, make sure you call &lt;code&gt;MongoClient.close()&lt;/code&gt;
to clean up resources&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-collection&#34;&gt;Get a Collection&lt;/h2&gt;

&lt;p&gt;To get a collection to operate upon, specify the name of the collection to
the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoDatabase.html#getCollection-java.lang.String-
&#34;&gt;&lt;code&gt;getCollection(String collectionName)&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;p&gt;The following example gets the collection &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;insert-a-document&#34;&gt;Insert a Document&lt;/h2&gt;

&lt;p&gt;Once you have the collection object, you can insert documents into the
collection. For example, consider the following JSON document; the document
contains a field &lt;code&gt;info&lt;/code&gt; which is an embedded document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;,
   &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;,
   &amp;quot;count&amp;quot; : 1,
   &amp;quot;info&amp;quot; : {
               x : 203,
               y : 102
             }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the document using the Java driver, use the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?org/bson/Document.html
&#34;&gt;Document&lt;/a&gt; class. You
can use this class to create the embedded document as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc = new Document(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;)
               .append(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;)
               .append(&amp;quot;count&amp;quot;, 1)
               .append(&amp;quot;info&amp;quot;, new Document(&amp;quot;x&amp;quot;, 203).append(&amp;quot;y&amp;quot;, 102));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert the document into the collection, use the &lt;code&gt;insertOne()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertOne(doc).timeout(10, SECONDS).toBlocking().single();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;In the API all methods returning a &lt;code&gt;Observables&lt;/code&gt; are &amp;ldquo;cold&amp;rdquo; streams meaning that nothing happens until they are Subscribed to.&lt;/p&gt;

&lt;p&gt;The example below does nothing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Observable&amp;lt;Success&amp;gt; observable = collection.insertOne(doc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only when an &lt;code&gt;Observable&lt;/code&gt; is subscribed to and data requested will the operation happen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Explictly subscribe:
observable.insertOne(doc).subscribe(new Subscriber&amp;lt;Success&amp;gt;() {
    @Override
    public void onCompleted() {
        System.out.println(&amp;quot;Completed&amp;quot;);
    }

    @Override
    public void onError(final Throwable e) {
        System.out.println(&amp;quot;Failed&amp;quot;);
    }

    @Override
    public void onNext(final Success success) {
        System.out.println(&amp;quot;Inserted&amp;quot;);
    }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the document has been inserted the &lt;code&gt;onNext&lt;/code&gt; method will be called and it will
print &amp;ldquo;Inserted!&amp;rdquo; followed by the &lt;code&gt;onCompleted&lt;/code&gt; method which will print &amp;ldquo;Completed&amp;rdquo;.&lt;br /&gt;
If there was an error for any reason the &lt;code&gt;onError&lt;/code&gt; method would print &amp;ldquo;Failed&amp;rdquo;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-multiple-documents&#34;&gt;Add Multiple Documents&lt;/h2&gt;

&lt;p&gt;To add multiple documents, you can use the &lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following example will add multiple documents of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &amp;quot;i&amp;quot; : value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the documents in a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
    documents.add(new Document(&amp;quot;i&amp;quot;, i));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert these documents to the collection, pass the list of documents to the
&lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertMany(documents).timeout(10, SECONDS).toBlocking().single();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we block on the &lt;code&gt;Observable&lt;/code&gt; to finish by calling &lt;code&gt;toBlocking().single()&lt;/code&gt; so that when we call the next operation we know the data has
been  inserted into the database!&lt;/p&gt;

&lt;h2 id=&#34;count-documents-in-a-collection&#34;&gt;Count Documents in A Collection&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve inserted 101 documents (the 100 we did in the loop, plus
the first one), we can check to see if we have them all using the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/mongoCollection#count--.html
&#34;&gt;count()&lt;/a&gt;
method. The following code should print &lt;code&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = printSubscriber(&amp;quot;total # of documents after inserting 100 small ones (should be 101): &amp;quot;);
collection.count().subscribe(subscriber);
subscriber.awaitTerminalEvent();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-the-collection&#34;&gt;Query the Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
method to query the collection.&lt;/p&gt;

&lt;h3 id=&#34;find-the-first-document-in-a-collection&#34;&gt;Find the First Document in a Collection&lt;/h3&gt;

&lt;p&gt;call the first() method on the result of the find() of method&lt;/p&gt;

&lt;p&gt;To get the first document in the collection, call the
&lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoIterable.html#first--
&#34;&gt;first()&lt;/a&gt;
method on the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
operation. &lt;code&gt;collection.find().first()&lt;/code&gt; returns the first document or if no document is found the &lt;code&gt;Observable&lt;/code&gt; just completes.
This is useful for queries that should only match a single document, or if you are interested in the first document only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = printDocumentSubscriber();
collection.find().first().subscribe(subscriber);
subscriber.awaitTerminalEvent();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example will print the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;551582c558c7b4fbacf16735&amp;quot; },
  &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;, &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;, &amp;quot;count&amp;quot; : 1,
  &amp;quot;info&amp;quot; : { &amp;quot;x&amp;quot; : 203, &amp;quot;y&amp;quot; : 102 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; element has been added automatically by MongoDB to your
document and your value will differ from that shown. MongoDB reserves field
names that start with
&amp;ldquo;_&amp;rdquo; and &amp;ldquo;$&amp;rdquo; for internal use.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;find-all-documents-in-a-collection&#34;&gt;Find All Documents in a Collection&lt;/h3&gt;

&lt;p&gt;To retrieve all the documents in the collection, we will use the
&lt;code&gt;find()&lt;/code&gt; method. The &lt;code&gt;find()&lt;/code&gt; method returns a &lt;code&gt;FindObservable&lt;/code&gt; instance that
provides a fluent interface for chaining or controlling find operations.
The following code retrieves all documents in the collection and prints them out
(101 documents):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = printDocumentSubscriber();
collection.find().subscribe(subscriber);
subscriber.awaitTerminalEvent();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-single-document-with-a-query-filter&#34;&gt;Get A Single Document with a Query Filter&lt;/h2&gt;

&lt;p&gt;We can create a filter to pass to the find() method to get a subset of
the documents in our collection. For example, if we wanted to find the
document for which the value of the &amp;ldquo;i&amp;rdquo; field is 71, we would do the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.mongodb.client.model.Filters.*;

collection.find(eq(&amp;quot;i&amp;quot;, 71)).first().subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will eventually print just one document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;5515836e58c7b4fbc756320b&amp;quot; }, &amp;quot;i&amp;quot; : 71 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Filters.html&#34;&gt;Filters&lt;/a&gt;, &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Sorts.html&#34;&gt;Sorts&lt;/a&gt; and &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Projections.html&#34;&gt;Projections&lt;/a&gt;
helpers for simple and concise ways of building up queries.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-set-of-documents-with-a-query&#34;&gt;Get a Set of Documents with a Query&lt;/h2&gt;

&lt;p&gt;We can use the query to get a set of documents from our collection. For
example, if we wanted to get all documents where &lt;code&gt;&amp;quot;i&amp;quot; &amp;gt; 50&lt;/code&gt;, we could
write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// now use a range query to get a larger subset
collection.find(gt(&amp;quot;i&amp;quot;, 50)).subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which should print the documents where &lt;code&gt;i &amp;gt; 50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could also get a range, say &lt;code&gt;50 &amp;lt; i &amp;lt;= 100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gt(&amp;quot;i&amp;quot;, 50), lte(&amp;quot;i&amp;quot;, 100))).subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting-documents&#34;&gt;Sorting documents&lt;/h2&gt;

&lt;p&gt;We can also use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Sorts.html
&#34;&gt;Sorts&lt;/a&gt; helpers to sort documents.
We add a sort to a find query by calling the &lt;code&gt;sort()&lt;/code&gt; method on a &lt;code&gt;FindObservable&lt;/code&gt;.  Below we use the &lt;a href=&#34;{{ &amp;lt; coreapiref &amp;quot;com/mongodb/client/model/Filters.html#exists-java.lang.String-&amp;quot;&amp;gt;}}&#34;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; helper and sort
&lt;a href=&#34;{{ &amp;lt; coreapiref &amp;quot;com/mongodb/client/model/Sorts.html#exists-java.lang.String-&amp;quot;&amp;gt;}}&#34;&gt;&lt;code&gt;descending(&amp;quot;i&amp;quot;)&lt;/code&gt;&lt;/a&gt; helper to sort our documents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(exists(&amp;quot;i&amp;quot;)).sort(descending(&amp;quot;i&amp;quot;)).subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;projecting-fields&#34;&gt;Projecting fields&lt;/h2&gt;

&lt;p&gt;Sometimes we don&amp;rsquo;t need all the data contained in a document. The &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Projections.html
&#34;&gt;Projections&lt;/a&gt;
helpers can be used to build the projection parameter for the find operation and limit the fields returned.&lt;br /&gt;
Below we&amp;rsquo;ll sort the collection, exclude the &lt;code&gt;_id&lt;/code&gt; field and output the first matching document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().projection(excludeId()).subscribe(printDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-documents&#34;&gt;Updating documents&lt;/h2&gt;

&lt;p&gt;There are numerous &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update-field/&#34;&gt;update operators&lt;/a&gt;
supported by MongoDB.&lt;/p&gt;

&lt;p&gt;To update at most a single document (may be 0 if none match the filter), use the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne&lt;/code&gt;&lt;/a&gt;
method to specify the filter and the update document.  Here we update the first document that meets the filter &lt;code&gt;i&lt;/code&gt; equals &lt;code&gt;10&lt;/code&gt; and set the value of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;110&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(eq(&amp;quot;i&amp;quot;, 10), new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;i&amp;quot;, 110)))
          .subscribe(printSubscriber(&amp;quot;Update Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update all documents matching the filter use the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt;
method.  Here we increment the value of &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;100&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt;
is less than &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateMany(lt(&amp;quot;i&amp;quot;, 100), new Document(&amp;quot;$inc&amp;quot;, new Document(&amp;quot;i&amp;quot;, 100)))
          .subscribe(printSubscriber(&amp;quot;Update Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The update methods return an &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/result/UpdateResult.html
&#34;&gt;&lt;code&gt;UpdateResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents modified by the update.&lt;/p&gt;

&lt;h2 id=&#34;deleting-documents&#34;&gt;Deleting documents&lt;/h2&gt;

&lt;p&gt;To delete at most a single document (may be 0 if none match the filter) use the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteOne(eq(&amp;quot;i&amp;quot;, 110))
          .subscribe(printSubscriber(&amp;quot;Delete Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete all documents matching the filter use the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; method.&lt;br /&gt;
Here we delete all documents where &lt;code&gt;i&lt;/code&gt; is greater or equal to &lt;code&gt;100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteMany(gte(&amp;quot;i&amp;quot;, 100)
          .subscribe(printSubscriber(&amp;quot;Delete Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The delete methods return a &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/result/DeleteResult.html
&#34;&gt;&lt;code&gt;DeleteResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents deleted.&lt;/p&gt;

&lt;h2 id=&#34;bulk-operations&#34;&gt;Bulk operations&lt;/h2&gt;

&lt;p&gt;These commands allow for the execution of bulk
insert/update/delete operations. There are two types of bulk operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operation in order and error out on the first write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operations and reports any the errors.&lt;/p&gt;

&lt;p&gt;Unordered bulk operations do not guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at two simple examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 1. Ordered bulk operation - order is guaranteed
subscriber = printSubscriber(&amp;quot;Bulk write results: %s&amp;quot;);
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4)))
  ).subscribe(subscriber);
subscriber.awaitTerminalEvent();

 // 2. Unordered bulk operation - no guarantee of order of operation
subscriber = printSubscriber(&amp;quot;Bulk write results: %s&amp;quot;);
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  new BulkWriteOptions().ordered(false)
  ).subscribe(subscriber);
subscriber.awaitTerminalEvent();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Use of the bulkWrite methods is not recommended when connected to pre-2.6 MongoDB servers, as this was the first server version to support
bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult
and BulkWriteException. The methods will still work for pre-2.6 servers, but performance will suffer, as each write operation has to be
executed one at a time.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tour Primer</title>
      <link>/mongo-java-driver-rx/1.0/getting-started/quick-tour-primer/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-rx/1.0/getting-started/quick-tour-primer/</guid>
      <description>

&lt;h1 id=&#34;quick-tour-primer&#34;&gt;Quick Tour Primer&lt;/h1&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;SubscriberHelpers.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-rx/blob/1.0.x/examples/tour/src/main/tour/SubscriberHelpers.java
&#34;&gt;examples source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB RxJava Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reactive-extensions&#34;&gt;Reactive Extensions&lt;/h2&gt;

&lt;p&gt;This library provides support for &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX (Reactive Extensions)&lt;/a&gt; by using the
&lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; library.  All database calls return an &lt;code&gt;Observable&lt;/code&gt; which an &lt;code&gt;Observer&lt;/code&gt; can subscribe to.
That &lt;code&gt;Observer&lt;/code&gt; reacts to whatever item or sequence of items the &lt;code&gt;Observable&lt;/code&gt; emits.  This pattern facilitates concurrent operations
because it does not need to block while waiting for the &lt;code&gt;Observable&lt;/code&gt; to emit objects, but instead it creates a sentry in the form of
an &lt;code&gt;Observer&lt;/code&gt; that stands ready to react appropriately at whatever future time the &lt;code&gt;Observable&lt;/code&gt; does so.&lt;/p&gt;

&lt;p&gt;For more information about Reactive Extensions and Observables go to: &lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;from-async-callbacks-to-observables&#34;&gt;From Async Callbacks to Observables&lt;/h2&gt;

&lt;p&gt;The MongoDB RxJava Driver is built upon the MongoDB Async driver which is callback driven.
The API mirrors the Async driver API and any methods that cause network IO return either a &lt;code&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; or a &lt;code&gt;MongoObservable&amp;lt;T&amp;gt;&lt;/code&gt;
where &lt;code&gt;T&lt;/code&gt; is the type of response for the operation.&lt;br /&gt;
The exception to that rule is for methods in the async driver that return a &lt;code&gt;Void&lt;/code&gt; value in the callback.
As an &lt;code&gt;Observable&amp;lt;Void&amp;gt;&lt;/code&gt; is generally considered bad practise, in these circumstances we
return a &lt;a href=&#34;/mongo-java-driver-rx/1.0/mongo-java-driver-rx/1.0/javadoc?com/mongodb/reactivestreams/client/Success.html
&#34;&gt;&lt;code&gt;Observable&amp;lt;Success&amp;gt;&lt;/code&gt;&lt;/a&gt; for the operation.&lt;/p&gt;

&lt;h3 id=&#34;mongoobservable&#34;&gt;MongoObservable&lt;/h3&gt;

&lt;p&gt;In RxJava &lt;code&gt;Observable&lt;/code&gt; is not an interface, so where the MongoDB Async Driver API follows a fluent interface pattern we return a
&lt;code&gt;MongoObservable&amp;lt;T&amp;gt;&lt;/code&gt;.  The &lt;code&gt;MongoObservable&amp;lt;T&amp;gt;&lt;/code&gt; mirrors the underlying fluent API and provides two extra methods:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;toObservable()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns an &lt;code&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; instance for the operation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.
method to convert into an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;All &lt;a href=&#34;http://www.reactive-streams.org/reactive-streams-1.0.0.RC4-javadoc/?org/reactivestreams/Publisher.html&#34;&gt;&lt;code&gt;Observables&lt;/code&gt;&lt;/a&gt; returned
from the API are cold, meaning that nothing happens until they are subscribed to. As such an observer is guaranteed to see the whole
sequence from the beginning. So just creating an &lt;code&gt;Observable&lt;/code&gt; won&amp;rsquo;t cause any network IO, and it&amp;rsquo;s not until &lt;code&gt;Subscriber.request()&lt;/code&gt; is called
that the driver executes the operation.&lt;/p&gt;

&lt;p&gt;Publishers in this implementation are unicast. Each &lt;a href=&#34;http://reactivex.io/RxJava/javadoc/rx/Subscription.html&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt;
to an &lt;code&gt;Observable&lt;/code&gt; relates to a single MongoDB operation and it&amp;rsquo;s &lt;a href=&#34;http://reactivex.io/RxJava/javadoc/rx/Subscriber.html&#34;&gt;&amp;lsquo;Subscriber&amp;rsquo;&lt;/a&gt;&lt;br /&gt;
will receive it&amp;rsquo;s own specific set of results.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;subscribers-used-in-the-quick-tour&#34;&gt;Subscribers used in the Quick Tour&lt;/h2&gt;

&lt;p&gt;For the Quick Tour we use RxJava&amp;rsquo;s &lt;a href=&#34;http://reactivex.io/RxJava/javadoc/rx/observers/TestSubscriber.html&#34;&gt;TestSubscriber&lt;T&gt;&lt;/a&gt; and although
this is an artificial scenario for reactive extensions we generally block on the results of one example before starting the next, so as to
ensure the state of the database.  &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-rx/blob/1.0.x/examples/tour/src/main/tour/SubscriberHelpers.java
&#34;&gt;&lt;code&gt;SubscriberHelpers.java&lt;/code&gt;&lt;/a&gt; provides
two static helpers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;printSubscriber&lt;/p&gt;

&lt;p&gt;Prints each value emitted by the &lt;code&gt;Observable&lt;/code&gt;, along with an optional initial message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;printDocumentSubscriber&lt;/p&gt;

&lt;p&gt;Prints the json version of each &lt;code&gt;Document&lt;/code&gt; emitted but the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;blocking-and-non-blocking-examples&#34;&gt;Blocking and non blocking examples&lt;/h2&gt;

&lt;p&gt;As the &lt;code&gt;TestSubscriber&lt;/code&gt; contains a latch that is only released when the &lt;code&gt;onCompleted&lt;/code&gt; method of the &lt;code&gt;Subscriber&lt;/code&gt; is called,
we can use that latch  to block on by calling the &lt;code&gt;subscriber.awaitTerminalEvent()&lt;/code&gt; method.  Below are two examples using our auto-requesting &lt;code&gt;PrintDocumentSubscriber&lt;/code&gt;.&lt;br /&gt;
The first is non-blocking and the second blocks waiting for the &lt;code&gt;Publisher&lt;/code&gt; to complete:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create a publisher
Observable&amp;lt;Document&amp;gt; observable = collection.find().toObservable();

// Non blocking
observable.subscribe(printDocumentSubscriber());

Subscriber&amp;lt;Document&amp;gt; subscriber = printDocumentSubscriber();
observable.subscribe(subscriber);
subscriber.awaitTerminalEvent(); // Block for the publisher to complete
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>